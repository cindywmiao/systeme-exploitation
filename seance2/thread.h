#ifndef __THREAD_H__
#define __THREAD_H__
#include <ucontext.h>
#include <stdlib.h>
#include <stdio.h>
/* identifiant de thread
 * NB: pourra être un entier au lieu d'un pointeur si ca vous arrange,
 *     mais attention aux inconvénient des tableaux de threads
 *     (consommation mémoire, cout d'allocation, ...).
 */
//typedef void * thread_t;

//define thread errocde
#define Error_ThreadSuccess		0
#define Error_ThreadInit		1
#define Error_ThreadCreate		2	
#define Error_ThreadSuspend 		3
#define Error_ThreadResume	 	4	
#define Error_ThreadTerminated		5
#define Error_ThreadExit		6	
#define Error_ThreadSetPriority		7
#define Error_ThreadWakeup		8
#define Error_ThreadYield		9
#define Error_ThreadDetach		10
#define Error_ThreadJoin		11


typedef struct fifo{
  thread_t* head;
  thread_t* next;

}fifo_t;

typedef enum
{
    THREAD_IDLE =0,
    THREAD_RUNNING,
    THREAD_SUSPENDED,
    THREAD_TERMINATED,
    THREAD_FINISHED,
    THREAD_DEAD
}ThreadState;

typedef struct thread{
  ucontext_t *uc;
  ThreadState status;
  void *reval;
  
}thread_t;

/* recuperer l'identifiant du thread courant.
 */
extern thread_t thread_self(void);

/* creer un nouveau thread qui va exécuter la fonction func avec l'argument funcarg.
 * renvoie 0 en cas de succès, -1 en cas d'erreur.
 */
extern int thread_create(thread_t *newthread, void *(*func)(void *), void *funcarg);

/* passer la main à un autre thread.
 */
extern int thread_yield(void);

/* attendre la fin d'exécution d'un thread.
 * la valeur renvoyée par le thread est placée dans *retval.
 * si retval est NULL, la valeur de retour est ignorée.
 */
extern int thread_join(thread_t thread, void **retval);

/* terminer le thread courant en renvoyant la valeur de retour retval.
 * cette fonction ne retourne jamais.
 *
 * L'attribut noreturn aide le compilateur à optimiser le code de
 * l'application (élimination de code mort). Attention à ne pas mettre
 * cet attribut dans votre interface tant que votre thread_exit()
 * n'est pas correctement implémenté (il ne doit jamais retourner).
 */
extern void thread_exit(void *retval) __attribute__ ((__noreturn__));

#endif /* __THREAD_H__ */
