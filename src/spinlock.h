/* This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 */

#ifndef __SPINLOCK__
#define __SPINLOCK__ 1

/* basic spinlock */ 
struct thread_spinlock_t{
   volatile unsigned int lock;
};


/* Initialize the spinlock LOCK.  If PSHARED is nonzero the spinlock can
   be shared between different processes.  */
extern int thread_spin_init (struct thread_spinlock_t * lock, int pshared);

/* Destroy the spinlock LOCK.  */
extern int thread_spin_destroy (struct thread_spinlock_t * lock);

/* Wait until spinlock LOCK is retrieved.  */
extern int thread_spin_lock (struct thread_spinlock_t * lock);

/* Try to lock spinlock LOCK.  */
extern int thread_spin_trylock (struct thread_spinlock_t * lock);

/* Release spinlock LOCK.  */
extern int thread_spin_unlock (struct thread_spinlock_t * lock);




#endif /** __SPIN_LOCK__ **/
